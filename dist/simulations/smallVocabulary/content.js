(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _dom = require('../../utils/dom.js');

var _string = require('../../utils/string.js');

var _math = require('../../utils/math.js');

var _array = require('../../utils/array.js');

var name = 'smallVocabulary',
    supportedlanguages = ['en', 'sv'],
    dictionary = {};

var textNodes = null,
    words = [],
    consonants = [],
    vowels = [];

function processText(text) {

  return text.split(/\s/).map(function (word) {

    if (word.trim().length === 0 || words.includes(word.trim().toLowerCase())) {

      return word;
    }

    return processWord(word);
  }).join(' ');
}

function processWord(word) {

  if (dictionary[word]) {
    return dictionary[word];
  }

  var wordArr = word.split('');

  var counter = (0, _math.random)(0, 1),
      consonant = (0, _math.random)(1, 2) === 1 ? true : false;

  for (var i = 0, l = wordArr.length; i < l; i++) {
    var letter = wordArr[i];

    if ((0, _string.isLetter)(letter)) {
      var newLetter = consonant ? (0, _array.randomArrayValue)(consonants) : (0, _array.randomArrayValue)(vowels);
      wordArr[i] = (0, _string.isUpperCase)(letter) ? newLetter.toUpperCase() : newLetter;
    }

    if (counter === i) {
      counter += (0, _math.random)(1, 2);
      consonant = !consonant;
    }
  }

  var newWord = wordArr.join('');

  dictionary[word] = newWord;

  return newWord;
}

function getDocumentLanguage() {
  var lang = document.querySelector('html').getAttribute('lang');

  if (!lang) {
    return 'en';
  }

  lang = lang.split('-').shift().toLowerCase();

  if (!supportedlanguages.includes(lang)) {
    return 'en';
  }

  return lang;
}

function start() {

  var tagsToIgnore = ['SCRIPT', 'STYLE', 'NOSCRIPT'];
  var lang = getDocumentLanguage();
  var rndKey = new Date().getTime();
  var langFileUrl = chrome.extension.getURL('/simulations/' + name + '/words.' + lang + '.json?' + rndKey);

  fetch(langFileUrl).then(function (response) {
    return response.json();
  }).then(function (json) {

    words = json.words;
    vowels = json.vowels;
    consonants = json.consonants;

    textNodes = (0, _dom.getTextNodes)(document.querySelector('body'));

    textNodes.forEach(function (el) {

      if (el.textContent.trim().length === 0 || el.parentElement && tagsToIgnore.includes(el.parentElement.tagName)) {
        return;
      }

      el._wdsOriginalText = el.textContent;
      el.textContent = processText(el.textContent);
    });
  });
}

function stop() {

  textNodes.forEach(function (el) {
    el.textContent = el._wdsOriginalText;
  });

  textNodes = null;
}

chrome.runtime.onMessage.addListener(function (request) {
  if (request.action === 'startSimulation' && request.simulation === name) {
    start();
  } else if (request.action === 'stopSimulation' && request.simulation === name) {
    stop();
  }
});


},{"../../utils/array.js":2,"../../utils/dom.js":3,"../../utils/math.js":4,"../../utils/string.js":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function randomArrayValue(array) {
  var length = array.length - 1,
      index = Math.floor(Math.random() * (length + 1));

  return array[index];
}

exports.randomArrayValue = randomArrayValue;


},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCss = addCss;
exports.addScript = addScript;
exports.addStyle = addStyle;
exports.appendHTML = appendHTML;
exports.getTextNodes = getTextNodes;
exports.removeElement = removeElement;
exports.setStyle = setStyle;
function addCss(href, callback) {
  var l = document.createElement('link');
  l.setAttribute('href', href);
  l.setAttribute('rel', 'stylesheet');
  l.onload = callback;
  document.getElementsByTagName('head')[0].appendChild(l);
  return l;
}

function addScript(src, callback) {
  var s = document.createElement('script');
  s.setAttribute('src', src);
  s.onload = callback;
  document.getElementsByTagName('head')[0].appendChild(s);
  return s;
}

function addStyle(str) {
  var s = document.createElement('style');
  s.innerText = str;
  document.getElementsByTagName('head')[0].appendChild(s);
  return s;
}

function appendHTML(el, html) {
  var tmpEl = document.createElement('div');
  tmpEl.innerHTML = html;

  while (tmpEl.firstChild) {
    el.appendChild(tmpEl.firstChild);
  }
}

function getTextNodes(node) {
  var all = [];
  for (node = node.firstChild; node; node = node.nextSibling) {
    if (node.nodeType == 3) all.push(node);else all = all.concat(getTextNodes(node));
  }
  return all;
}

function removeElement(el) {
  el.parentNode.removeChild(el);
}

function setStyle(element, style) {
  for (var s in style) {
    element.style[s] = style[s];
  }
}


},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.random = random;
exports.pointInRect = pointInRect;
exports.inRange = inRange;
function random(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}

function pointInRect(x, y, rect) {
  return inRange(x, rect.x, rect.x + rect.width) && inRange(y, rect.y, rect.y + rect.height);
}

function inRange(value, min, max) {
  return value >= Math.min(min, max) && value <= Math.max(min, max);
}


},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLetter = isLetter;
exports.isUpperCase = isUpperCase;
function isLetter(c) {
  return c.toLowerCase() !== c.toUpperCase();
}

function isUpperCase(c) {
  return c === c.toUpperCase();
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9qcy9iYWJlbC9zaW11bGF0aW9ucy9zbWFsbFZvY2FidWxhcnkvY29udGVudC5qcyIsImJ1aWxkL2pzL2JhYmVsL3V0aWxzL2FycmF5LmpzIiwiYnVpbGQvanMvYmFiZWwvdXRpbHMvZG9tLmpzIiwiYnVpbGQvanMvYmFiZWwvdXRpbHMvbWF0aC5qcyIsImJ1aWxkL2pzL2JhYmVsL3V0aWxzL3N0cmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQUVBLElBQUksT0FBTyxRQUFRLG9CQUFSLENBQVg7O0FBRUEsSUFBSSxVQUFVLFFBQVEsdUJBQVIsQ0FBZDs7QUFFQSxJQUFJLFFBQVEsUUFBUSxxQkFBUixDQUFaOztBQUVBLElBQUksU0FBUyxRQUFRLHNCQUFSLENBQWI7O0FBRUEsSUFBSSxPQUFPLGlCQUFYO0FBQUEsSUFDSSxxQkFBcUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUR6QjtBQUFBLElBRUksYUFBYSxFQUZqQjs7QUFJQSxJQUFJLFlBQVksSUFBaEI7QUFBQSxJQUNJLFFBQVEsRUFEWjtBQUFBLElBRUksYUFBYSxFQUZqQjtBQUFBLElBR0ksU0FBUyxFQUhiOztBQUtBLFNBQVMsV0FBVCxDQUFxQixJQUFyQixFQUEyQjs7QUFFekIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxJQUFYLEVBQWlCLEdBQWpCLENBQXFCLFVBQVUsSUFBVixFQUFnQjs7QUFFMUMsUUFBSSxLQUFLLElBQUwsR0FBWSxNQUFaLEtBQXVCLENBQXZCLElBQTRCLE1BQU0sUUFBTixDQUFlLEtBQUssSUFBTCxHQUFZLFdBQVosRUFBZixDQUFoQyxFQUEyRTs7QUFFekUsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsV0FBTyxZQUFZLElBQVosQ0FBUDtBQUNELEdBUk0sRUFRSixJQVJJLENBUUMsR0FSRCxDQUFQO0FBU0Q7O0FB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QUFULENBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLElBQTNCLEVBQWlDO0FBQy9CLFNBQU8sUUFBUSxDQUFSLEVBQVcsS0FBSyxDQUFoQixFQUFtQixLQUFLLENBQUwsR0FBUyxLQUFLLEtBQWpDLEtBQTJDLFFBQVEsQ0FBUixFQUFXLEtBQUssQ0FBaEIsRUFBbUIsS0FBSyxDQUFMLEdBQVMsS0FBSyxNQUFqQyxDQUFsRDtBQUNEOztBQUVELFNBQVMsT0FBVCxDQUFpQixLQUFqQixFQUF3QixHQUF4QixFQUE2QixHQUE3QixFQUFrQztBQUNoQyxTQUFPLFNBQVMsS0FBSyxHQUFMLENBQVMsR0FBVCxFQUFjLEdBQWQsQ0FBVCxJQUErQixTQUFTLEtBQUssR0FBTCxDQUFTLEdBQVQsRUFBYyxHQUFkLENBQS9DO0FBQ0Q7QUFDRDs7O0FDbkJBOztBQUVBLE9BQU8sY0FBUCxDQUFzQixPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQyxTQUFPO0FBRG9DLENBQTdDO0FBR0EsUUFBUSxRQUFSLEdBQW1CLFFBQW5CO0FBQ0EsUUFBUSxXQUFSLEdBQXNCLFdBQXRCO0FBQ0EsU0FBUyxRQUFULENBQWtCLENBQWxCLEVBQXFCO0FBQ25CLFNBQU8sRUFBRSxXQUFGLE9BQW9CLEVBQUUsV0FBRixFQUEzQjtBQUNEOztBQUVELFNBQVMsV0FBVCxDQUFxQixDQUFyQixFQUF3QjtBQUN0QixTQUFPLE1BQU0sRUFBRSxXQUFGLEVBQWI7QUFDRDtBQUNEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc31yZXR1cm4gZX0pKCkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZG9tLmpzJyk7XG5cbnZhciBfc3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvc3RyaW5nLmpzJyk7XG5cbnZhciBfbWF0aCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL21hdGguanMnKTtcblxudmFyIF9hcnJheSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FycmF5LmpzJyk7XG5cbnZhciBuYW1lID0gJ3NtYWxsVm9jYWJ1bGFyeScsXG4gICAgc3VwcG9ydGVkbGFuZ3VhZ2VzID0gWydlbicsICdzdiddLFxuICAgIGRpY3Rpb25hcnkgPSB7fTtcblxudmFyIHRleHROb2RlcyA9IG51bGwsXG4gICAgd29yZHMgPSBbXSxcbiAgICBjb25zb25hbnRzID0gW10sXG4gICAgdm93ZWxzID0gW107XG5cbmZ1bmN0aW9uIHByb2Nlc3NUZXh0KHRleHQpIHtcblxuICByZXR1cm4gdGV4dC5zcGxpdCgvXFxzLykubWFwKGZ1bmN0aW9uICh3b3JkKSB7XG5cbiAgICBpZiAod29yZC50cmltKCkubGVuZ3RoID09PSAwIHx8IHdvcmRzLmluY2x1ZGVzKHdvcmQudHJpbSgpLnRvTG93ZXJDYXNlKCkpKSB7XG5cbiAgICAgIHJldHVybiB3b3JkO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzV29yZCh3b3JkKTtcbiAgfSkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzV29yZCh3b3JkKSB7XG5cbiAgaWYgKGRpY3Rpb25hcnlbd29yZF0pIHtcbiAgICByZXR1cm4gZGljdGlvbmFyeVt3b3JkXTtcbiAgfVxuXG4gIHZhciB3b3JkQXJyID0gd29yZC5zcGxpdCgnJyk7XG5cbiAgdmFyIGNvdW50ZXIgPSAoMCwgX21hdGgucmFuZG9tKSgwLCAxKSxcbiAgICAgIGNvbnNvbmFudCA9ICgwLCBfbWF0aC5yYW5kb20pKDEsIDIpID09PSAxID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gd29yZEFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgbGV0dGVyID0gd29yZEFycltpXTtcblxuICAgIGlmICgoMCwgX3N0cmluZy5pc0xldHRlcikobGV0dGVyKSkge1xuICAgICAgdmFyIG5ld0xldHRlciA9IGNvbnNvbmFudCA/ICgwLCBfYXJyYXkucmFuZG9tQXJyYXlWYWx1ZSkoY29uc29uYW50cykgOiAoMCwgX2FycmF5LnJhbmRvbUFycmF5VmFsdWUpKHZvd2Vscyk7XG4gICAgICB3b3JkQXJyW2ldID0gKDAsIF9zdHJpbmcuaXNVcHBlckNhc2UpKGxldHRlcikgPyBuZXdMZXR0ZXIudG9VcHBlckNhc2UoKSA6IG5ld0xldHRlcjtcbiAgICB9XG5cbiAgICBpZiAoY291bnRlciA9PT0gaSkge1xuICAgICAgY291bnRlciArPSAoMCwgX21hdGgucmFuZG9tKSgxLCAyKTtcbiAgICAgIGNvbnNvbmFudCA9ICFjb25zb25hbnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5ld1dvcmQgPSB3b3JkQXJyLmpvaW4oJycpO1xuXG4gIGRpY3Rpb25hcnlbd29yZF0gPSBuZXdXb3JkO1xuXG4gIHJldHVybiBuZXdXb3JkO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudExhbmd1YWdlKCkge1xuICB2YXIgbGFuZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKTtcblxuICBpZiAoIWxhbmcpIHtcbiAgICByZXR1cm4gJ2VuJztcbiAgfVxuXG4gIGxhbmcgPSBsYW5nLnNwbGl0KCctJykuc2hpZnQoKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICghc3VwcG9ydGVkbGFuZ3VhZ2VzLmluY2x1ZGVzKGxhbmcpKSB7XG4gICAgcmV0dXJuICdlbic7XG4gIH1cblxuICByZXR1cm4gbGFuZztcbn1cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG5cbiAgdmFyIHRhZ3NUb0lnbm9yZSA9IFsnU0NSSVBUJywgJ1NUWUxFJywgJ05PU0NSSVBUJ107XG4gIHZhciBsYW5nID0gZ2V0RG9jdW1lbnRMYW5ndWFnZSgpO1xuICB2YXIgcm5kS2V5ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciBsYW5nRmlsZVVybCA9IGNocm9tZS5leHRlbnNpb24uZ2V0VVJMKCcvc2ltdWxhdGlvbnMvJyArIG5hbWUgKyAnL3dvcmRzLicgKyBsYW5nICsgJy5qc29uPycgKyBybmRLZXkpO1xuXG4gIGZldGNoKGxhbmdGaWxlVXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGpzb24pIHtcblxuICAgIHdvcmRzID0ganNvbi53b3JkcztcbiAgICB2b3dlbHMgPSBqc29uLnZvd2VscztcbiAgICBjb25zb25hbnRzID0ganNvbi5jb25zb25hbnRzO1xuXG4gICAgdGV4dE5vZGVzID0gKDAsIF9kb20uZ2V0VGV4dE5vZGVzKShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykpO1xuXG4gICAgdGV4dE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgIGlmIChlbC50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoID09PSAwIHx8IGVsLnBhcmVudEVsZW1lbnQgJiYgdGFnc1RvSWdub3JlLmluY2x1ZGVzKGVsLnBhcmVudEVsZW1lbnQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbC5fd2RzT3JpZ2luYWxUZXh0ID0gZWwudGV4dENvbnRlbnQ7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IHByb2Nlc3NUZXh0KGVsLnRleHRDb250ZW50KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG5cbiAgdGV4dE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgZWwudGV4dENvbnRlbnQgPSBlbC5fd2RzT3JpZ2luYWxUZXh0O1xuICB9KTtcblxuICB0ZXh0Tm9kZXMgPSBudWxsO1xufVxuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAnc3RhcnRTaW11bGF0aW9uJyAmJiByZXF1ZXN0LnNpbXVsYXRpb24gPT09IG5hbWUpIHtcbiAgICBzdGFydCgpO1xuICB9IGVsc2UgaWYgKHJlcXVlc3QuYWN0aW9uID09PSAnc3RvcFNpbXVsYXRpb24nICYmIHJlcXVlc3Quc2ltdWxhdGlvbiA9PT0gbmFtZSkge1xuICAgIHN0b3AoKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZW50LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5mdW5jdGlvbiByYW5kb21BcnJheVZhbHVlKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggLSAxLFxuICAgICAgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobGVuZ3RoICsgMSkpO1xuXG4gIHJldHVybiBhcnJheVtpbmRleF07XG59XG5cbmV4cG9ydHMucmFuZG9tQXJyYXlWYWx1ZSA9IHJhbmRvbUFycmF5VmFsdWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkQ3NzID0gYWRkQ3NzO1xuZXhwb3J0cy5hZGRTY3JpcHQgPSBhZGRTY3JpcHQ7XG5leHBvcnRzLmFkZFN0eWxlID0gYWRkU3R5bGU7XG5leHBvcnRzLmFwcGVuZEhUTUwgPSBhcHBlbmRIVE1MO1xuZXhwb3J0cy5nZXRUZXh0Tm9kZXMgPSBnZXRUZXh0Tm9kZXM7XG5leHBvcnRzLnJlbW92ZUVsZW1lbnQgPSByZW1vdmVFbGVtZW50O1xuZXhwb3J0cy5zZXRTdHlsZSA9IHNldFN0eWxlO1xuZnVuY3Rpb24gYWRkQ3NzKGhyZWYsIGNhbGxiYWNrKSB7XG4gIHZhciBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICBsLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICBsLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgbC5vbmxvYWQgPSBjYWxsYmFjaztcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChsKTtcbiAgcmV0dXJuIGw7XG59XG5cbmZ1bmN0aW9uIGFkZFNjcmlwdChzcmMsIGNhbGxiYWNrKSB7XG4gIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHMuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICBzLm9ubG9hZCA9IGNhbGxiYWNrO1xuICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHMpO1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUoc3RyKSB7XG4gIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgcy5pbm5lclRleHQgPSBzdHI7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQocyk7XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRIVE1MKGVsLCBodG1sKSB7XG4gIHZhciB0bXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0bXBFbC5pbm5lckhUTUwgPSBodG1sO1xuXG4gIHdoaWxlICh0bXBFbC5maXJzdENoaWxkKSB7XG4gICAgZWwuYXBwZW5kQ2hpbGQodG1wRWwuZmlyc3RDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGV4dE5vZGVzKG5vZGUpIHtcbiAgdmFyIGFsbCA9IFtdO1xuICBmb3IgKG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7IG5vZGU7IG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykgYWxsLnB1c2gobm9kZSk7ZWxzZSBhbGwgPSBhbGwuY29uY2F0KGdldFRleHROb2Rlcyhub2RlKSk7XG4gIH1cbiAgcmV0dXJuIGFsbDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChlbCkge1xuICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgZm9yICh2YXIgcyBpbiBzdHlsZSkge1xuICAgIGVsZW1lbnQuc3R5bGVbc10gPSBzdHlsZVtzXTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJhbmRvbSA9IHJhbmRvbTtcbmV4cG9ydHMucG9pbnRJblJlY3QgPSBwb2ludEluUmVjdDtcbmV4cG9ydHMuaW5SYW5nZSA9IGluUmFuZ2U7XG5mdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IobWluICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG59XG5cbmZ1bmN0aW9uIHBvaW50SW5SZWN0KHgsIHksIHJlY3QpIHtcbiAgcmV0dXJuIGluUmFuZ2UoeCwgcmVjdC54LCByZWN0LnggKyByZWN0LndpZHRoKSAmJiBpblJhbmdlKHksIHJlY3QueSwgcmVjdC55ICsgcmVjdC5oZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBpblJhbmdlKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gdmFsdWUgPj0gTWF0aC5taW4obWluLCBtYXgpICYmIHZhbHVlIDw9IE1hdGgubWF4KG1pbiwgbWF4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGguanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNMZXR0ZXIgPSBpc0xldHRlcjtcbmV4cG9ydHMuaXNVcHBlckNhc2UgPSBpc1VwcGVyQ2FzZTtcbmZ1bmN0aW9uIGlzTGV0dGVyKGMpIHtcbiAgcmV0dXJuIGMudG9Mb3dlckNhc2UoKSAhPT0gYy50b1VwcGVyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBpc1VwcGVyQ2FzZShjKSB7XG4gIHJldHVybiBjID09PSBjLnRvVXBwZXJDYXNlKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcuanMubWFwXG4iXX0=
