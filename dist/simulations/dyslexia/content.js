(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _math = require('../../utils/math.js');

var math = _interopRequireWildcard(_math);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

var textNodes = [],
    intervals = [];

function getTextNodes(node) {
  var all = [];
  for (node = node.firstChild; node; node = node.nextSibling) {
    if (node.nodeType == 3) all.push(node);else all = all.concat(getTextNodes(node));
  }
  return all;
}

function isLetter(c) {
  return c.toLowerCase() !== c.toUpperCase();
}

function getRandomLetterIndex(txt) {
  var l = '';
  var i = null;

  while (!isLetter(l)) {
    i = math.random(0, txt.length - 1);
    l = txt[i];
  }

  return i;
}

function shuffleString(txt) {
  var a = txt.split('');
  var n = a.length;

  for (var i = n - 1; i > 0; i--) {
    var tmp = a[i];

    if (isLetter(tmp)) {
      var j = getRandomLetterIndex(txt);
      a[i] = a[j];
      a[j] = tmp;
    }
  }

  return a.join('');
}

function start() {

  textNodes = getTextNodes(document.querySelector('body'));

  textNodes.forEach(function (el) {

    el._wdsOriginalText = el.textContent;

    var interval = setInterval(function () {

      var words = el.textContent.split(/\s/);

      el.textContent = words.map(function (word) {
        if (word.trim().length === 0) {
          return word;
        }

        if (word.length <= 3) {
          return shuffleString(word);
        }

        var lettersToKeep = Math.max(Math.round(word.length / 5), 1);

        return word.substring(0, 2) + shuffleString(word.substring(2, word.length - 2)) + word.substring(word.length - 2);
      }).join(' ');
    }, math.random(750, 1500));

    intervals.push(interval);
  });
}

function stop() {
  intervals.forEach(function (interval) {
    clearInterval(interval);
  });

  textNodes.forEach(function (el) {
    el.textContent = el._wdsOriginalText;
  });
}

chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  if (request.action === 'startSimulation' && request.simulation === 'dyslexia') {
    start();
  } else if (request.action === 'stopSimulation' && request.simulation === 'dyslexia') {
    stop();
  }
});


},{"../../utils/math.js":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.random = random;
exports.pointInRect = pointInRect;
exports.inRange = inRange;
function random(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}

function pointInRect(x, y, rect) {
  return inRange(x, rect.x, rect.x + rect.width) && inRange(y, rect.y, rect.y + rect.height);
}

function inRange(value, min, max) {
  return value >= Math.min(min, max) && value <= Math.max(min, max);
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
